

    episodes = 3000
    num_runs = 10
    num_bins = 16  # 12 if algo == "Q-Disc" else 16
    log_bins = False



                              gamma=0.99,
                              min_alpha=1.0,  # TODO: was 0.1, changed for Tsetlin
                              min_epsilon=0.05,  # TODO: was 0.1, changed for Tsetlin
                              alpha_decay=0.004,  # 0.004,   # default 1 = fixed alpha (instant decay to min_alpha)
                              epsilon_decay=0.006  # default: 1 = fixed epsilon (instant decay to min_epsilon)


    T: int = 10000  # 4000  # TODO try multiples of num clauses; As a strategy for problems where the number of clauses is unknown, and for real-world applications where noise plays a significant role, the RTM can be initialized with a much larger T. Then, since the output, yo, is a fraction of the threshold, T, the error decreases.
    s: int = 2.5  # 2  # For instance, if someone [increases s to 4], clauses will start to learn much finer patterns, such as (1 0 .), (1 1 .), and (0 1 .). This significantly increases the number of clauses needed to capture the sub-patterns.
    number_of_clauses: int = 5000  # LASTCHANGE from 10000 # 4000  # TODO: try reducing to fractions of T
    states: int = 25  # 25  # 100
    max_target: int = 300  # 4000  # TODO: Make dynamic
    min_target: int = 0  # TODO: Make dynamic


